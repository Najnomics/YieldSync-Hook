name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  FOUNDRY_PROFILE: ci

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Show Forge version
        run: |
          forge --version

      - name: Run Forge build
        run: |
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          forge test -vvv
        id: test

      - name: Run Forge fuzz tests
        run: |
          forge test --match-path "test/fuzz/*" -vvv
        id: fuzz-test

      - name: Run Forge coverage
        run: |
          forge coverage --report lcov
        id: coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          flags: foundry
          name: foundry-coverage
          fail_ci_if_error: false

      - name: Run Slither static analysis
        uses: crytic/slither-action@v0.3.0
        id: slither
        with:
          target: 'src/'
          slither-config: 'slither.config.json'
          fail-on: none
          slither-args: '--filter-paths "lib/|test/"'

      - name: Check formatting
        run: |
          forge fmt --check
        id: format

      - name: Run gas snapshot
        run: |
          forge snapshot --check
        id: snapshot

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: check
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run Mythril analysis
        continue-on-error: true
        run: |
          pip install mythril
          myth analyze src/ --solv 0.8.27

  avs-tests:
    name: AVS Integration Tests
    runs-on: ubuntu-latest
    needs: check

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install AVS dependencies
        run: |
          cd avs && npm ci

      - name: Run AVS tests
        run: |
          cd avs && npm test

      - name: Run E2E tests
        run: |
          cd avs && npm run test:e2e

  deployment-simulation:
    name: Deployment Simulation
    runs-on: ubuntu-latest
    needs: [check, avs-tests]
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Simulate Anvil deployment
        run: |
          forge script script/DeployAnvil.s.sol --fork-url http://localhost:8545 --broadcast --verify -vvvv
        env:
          PRIVATE_KEY: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

      - name: Simulate Testnet deployment  
        run: |
          forge script script/DeployTestnet.s.sol --rpc-url ${{ secrets.HOLESKY_RPC_URL }} --verify -vvvv
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          # Check if all contracts have NatSpec documentation
          find src -name "*.sol" -exec grep -L "@title\|@notice\|@dev" {} \; | tee undocumented.txt
          if [ -s undocumented.txt ]; then
            echo "Found undocumented contracts:"
            cat undocumented.txt
            exit 1
          fi

      - name: Validate README links
        run: |
          # Check for broken links in README
          grep -o 'http[s]*://[^)]*' README.md | xargs -I {} curl -f {} || echo "Some links may be broken"